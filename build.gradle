buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

war {
	baseName = 'trackerappdemo'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	//compile('org.springframework.cloud:spring-cloud-starter-aws')
	//compile('org.springframework.boot:spring-boot-starter-web')
	//compile('org.springframework.boot:spring-boot-starter-web-services')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	//testCompile('org.springframework.boot:spring-boot-starter-test')
	//compile 'org.mapstruct:mapstruct-jdk8:1.0.0.Final'
   //	compile group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.0.0.Final'
	 // jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
   // compile(files(genJaxb.sourcesDir).builtBy(genJaxb))
    compile("org.springframework.boot:spring-boot-starter-ws")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile("wsdl4j:wsdl4j:1.6.1")
   // jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
   // compile(files(genJaxb.sourcesDir).builtBy(genJaxb))
    compile 'org.mapstruct:mapstruct-jdk8:1.0.0.Final'
   // apt 'org.mapstruct:mapstruct-processor:1.0.0.Final'
   compile group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.0.0.Final'
}

dependencyManagement {
	imports {
		//mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR3"
	}
}
task genJaxb {
final def packageName = "com.demo.domain"
    ext.sourcesDir = "src/main/java"
    ext.schemaDir = "src/main/resources"

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
          
            xjc(destdir: sourcesDir, package: packageName) {
            schema(dir: schemaDir, includes: "TrackingService.wsdl")
                arg(value: "-wsdl")
                
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

task afterEclipseImport {
	//dependsOn "genJaxb"
}

configurations {
  //  jaxb
}

